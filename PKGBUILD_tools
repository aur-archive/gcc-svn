# Copyright 2009 Michael F. Witten

# This file is part of the gcc-svn PKGBUILD system.
# 
# The gcc-svn PKGBUILD system is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
# 
# The gcc-svn PKGBUILD system is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty
# of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with the gcc-svn PKGBUILD system.  If not, see
# <http://www.gnu.org/licenses/>.

# Maintainer/Author : Michael Witten <mfwitten>

######################
#### Parse Config ####
######################

_with_phase_source()
{
  _with_phase_source_flag=1
  _with_phase_source_revision=$1
}

_with_phase_clean()
{
  _with_phase_clean_flag=1
}

_with_phase_config()
{
  _with_phase_config_flag=1
}

_with_phase_compile()
{
  _with_phase_compile_flag=1
}

_with_phase_test()
{
  _with_phase_test_flag=1
  _with_phase_test_makedepends=(dejagnu=1.5 expect tcl)
}

_with_phase_install()
{
  _with_phase_install_flag=1
}

_with_graphite_loops()
{
  local ppl='ppl=0.11.2'                                 # gcc docs say >=0.10
  local cloog='cloog=0.16.2'                             # gcc docs say >=0.15

  _with_graphite_loops_makedepends=("$ppl" "$cloog")
  _with_graphite_loops_depends=("${_with_graphite_loops_makedepends[@]}")
}

_with_docs_info()
{
  _with_docs_info_makedepends=(texinfo=4.13a)            # gnu docs say >=4.7
}

_with_docs_pdf()
{
  _with_docs_pdf_flag=1

  _with_docs_pdf_makedepends=(
     texinfo=4.31a                                       # gnu docs say >=4.8
     texlive-core=2009.1557
  ) 

  _with_docs_pdf_target_compile=pdf
  _with_docs_pdf_target_install=install-pdf
}

# Currently, there is no rule to install the DVI docs
# So this code can remain dormant (probably forever)
#
#_with_docs_dvi()
#{
#  _with_docs_pdf_flag=1
#
#  _with_docs_dvi_makedepends=(
#     texinfo=4.31a                                       # gnu docs say >=4.8
#     texlive-core=2009.1557
#  ) 
#
#  _with_docs_dvi_target_compile=dvi
#  _with_docs_dvi_target_install=install-dvi
#}

_with_docs_html()
{
  _with_docs_html_flag=1

  _with_docs_html_makedepends=(texinfo=4.13a)            # gnu docs say >=4.7

  _with_docs_html_target_compile=html
  _with_docs_html_target_install=install-html
}

_without_multilib()
{
  _with_multilib_config=--disable-multilib
}

_with_prefix()
{
  _with_prefix_path=$1
  _with_prefix_config="--prefix=$1"
}

_with_program_prefix()
{
  _with_program_prefix_config="--program-prefix=$1"
}

_with_program_suffix()
{
  _with_program_suffix_config="--program-suffix=$1"
}

_with_program_transform_name()
{
  _with_program_transform_name_config="--program-transform-name=$1"
}

_with_append_paths_script()
{
  if [ "$_with_prepend_paths_script_flag" ]; then
    error "'_with_append_paths_script' is silly when '_with_prepend_paths_script' is in effect. Please choose one."
    exit 1
  fi

  _with_append_paths_script_flag=1
  _install_paths_script_func=_phase_install_paths_script_for_appending
}

_with_prepend_paths_script()
{
  if [ "$_with_append_paths_script_flag" ]; then
    error "'_with_prepend_paths_script' is silly when '_with_append_paths_script' is in effect. Please choose one."
    exit 1
  fi

  _with_prepend_paths_script_flag=1
  _install_paths_script_func=_phase_install_paths_script_for_prepending
}

_with_threads()
{
  _with_threads_config="--enable-threads=$1"
}

_with_language()
{
  for i in "$@"; do
    _with_language_set_add "$i"
    _with_language_`echo "$i" | tr +- p_`
  done

  IFS_OLD=$IFS

    IFS=,
    _with_language_config="--enable-languages=${_with_language_set[*]}"

  IFS=$IFS_OLD
}

_with_gnu_unique_object()
{
  if ! _with_language_set_has c++; then
    error '_with_gnu_unique_object' requires '_with_language c++'
    exit 1
  fi
                                                          # http://gcc.gnu.org/install/configure.html
  local glibc=$_package_glibc                             # gnu docs say >=2.11

  _with_gnu_unique_object_makedepends=("$glibc")
  _with_gnu_unique_object_depends=("${_with_gnu_unique_object_makedepends[@]}")

  _with_gnu_unique_object_config=--enable-gnu-unique-object
}

_with_lto()
{
  local elfutils='elfutils=0.152'                            # gnu docs say >=0.8.12

  _with_lto_makedepends=("$elfutils")
  _with_lto_depends=("${_with_lto_makedepends[@]}")

  _with_lto_config=--with-lto
}

_without_error_on_warning()
{
  _with_error_on_warning_config=--disable-werror
}

_with_compiler_bootstrap()
{
  _with_compiler_bootstrap_config=--enable-bootstrap
  _with_compiler_bootstrap_make_args="$1"
}

_with_bootstrap_lean()
{
  _with_compiler_bootstrap bootstrap-lean
}

_with_bootstrap_profiled()
{
  _with_compiler_bootstrap profiledbootstrap
}

_with_ignore_phase_test_failure()
{
  _with_ignore_phase_test_failure_flag=1
}

_with_boot_cflags()
{
  IFS_OLD=$IFS

    IFS=`echo -ne ' \t\n'`
    _with_boot_cflags_make_args="BOOT_CFLAGS=$*"

  IFS=$IFS_OLD
}

_with_build_config()
{
  IFS_OLD=$IFS

    IFS=`echo -ne ' \t\n'`
    _with_build_config_make_args="BUILD_CONFIG=$*"

  IFS=$IFS_OLD
}

########################
#### Language Setup ####
########################

_with_language_set_has()
{
  in_array $1 "${_with_language_set[@]}"
}

_with_language_set_add()
{
  _with_language_set_has $1 ||
    _with_language_set[${#_with_language_set[*]}]=$1
}

_with_language_c()
{
  local glibc=$_package_glibc

  _with_language_c_makedepends=("$glibc")
  _with_language_c_depends=("${_with_language_c_makedepends[@]}")
}

_with_language_cpp()
{
                                                         # http://gcc.gnu.org/install/specific.html#x-x-linux-gnu
  local glibc=$_package_glibc                            # gnu docs say >=2.2.5

  _with_language_cpp_makedepends=("$glibc")
  _with_language_cpp_depends=("${_with_language_cpp_makedepends[@]}")
}

###################
#### Utilities ####
###################

in_array()
{
  local pattern="$1" element
  shift

  for element
  do
     [[ $element = $pattern ]] && return 0
  done

  return 1
}

################
#### Phases ####
################

#### PKGBUILD Setup
_pkgbuild_setup_makedepends()
{
  makedepends=(
  
    coreutils
  
    ###################################################
    ## http://gcc.gnu.org/install/prerequisites.html ##
    ###################################################
  
    #### "Tools/packages necessary for building GCC"
  
      bash=4.2.010
      gawk=3.1.8                                           # gcc docs say >=3.1.5
     ${_package_binutils}
      make=3.82                                            # gcc docs say >=3.80
      gcc=4.6.1
      flex=2.5.35
      bison=2.5
     ${_package_gmp}
     ${_package_mpfr}
     ${_with_graphite_loops_makedepends[*]}
     ${_package_libmpc}
     ${_with_lto_makedepends[*]}
    
    #### "Tools/packages necessary for modifying GCC"
  
      autoconf-2.64                                        # gcc docs say  =2.64
      m4=1.4.16                                            # gcc docs say >=1.4.6
      automake=1.11.1                                      # gcc docs say  =1.11
      gettext=0.18.1.1                                     # gcc docs say >=0.14.5
      gperf=3.0.4                                          # gcc docs say >=2.7.2
     ${_with_phase_test_makedepends[*]}
      autogen=5.9.9                                        # gcc docs say >=5.5.4
      guile=1.8.8                                          # gcc docs say >=1.4.1
      flex=2.5.35                                          # gcc docs say >=2.5.4
     ${_with_docs_info[*]}
     ${_with_docs_pdf[*]}
     #${_with_docs_dvi[*]}                                 # No rule to install dvi docs
     ${_with_docs_html[*]}
     'subversion>=1.6.6'
      perl=5.12.3                                          # gcc docs say >=5.6.1
      diffutils=3.0                                        # gcc docs say >=2.7
      patch=2.6.1                                          # gcc docs say >=2.5.4
  
    #### Not listed in those places
     ${_with_language_c_makedepends[*]}
     ${_with_language_cpp_makedepends[*]}
     ${_with_gnu_unique_object_makedepends[*]}
  
  )
}

_pkgbuild_setup_depends()
{
  depends=(
  
    ${_package_binutils}
    ${_with_graphite_loops_depends[*]}
    ${_package_gmp}
    ${_package_mpfr}
    ${_package_libmpc}
    ${_with_gnu_unique_object_depends[*]}
    ${_with_language_c_depends[*]}
    ${_with_language_cpp_depends[*]}
    ${_with_lto_depends[*]}
  
  )
}

#### Source

_phase_source_if_necessary()
{
  cd "$srcdir"                                           || return 1

  if [ ! $_with_phase_source_flag ]; then

    cd "$_svnmod"                                        || return 1

  else

    msg "Connecting to server...."

    if [ -d "$_svnmod" ] ; then

      cd "$_svnmod"                                      || return 1
      svn update -r $_with_phase_source_revision         || return 1

      msg "The local files are updated."

    else

      svn checkout                                       \
        -r $_with_phase_source_revision                  \
        "$_svntrunk" "$_svnmod"                          || return 1

    fi

    msg "Checkout done or server timeout"

  fi

  cd "$srcdir" && mkdir -p build                         || return 1
}

#### Clean

_phase_clean_if_necessary()
{
  if [ $_with_phase_clean_flag ]; then

    msg "Cleaning ..."
    rm -rf "$srcdir"/build/*                             || return 1

  fi
}

#### Config

_phase_config_if_necessary()
{
  if [ $_with_phase_config_flag ]; then

    msg "Configuring ..."

    cd "$srcdir/build" && "../$_svnmod/configure"        \
      $_with_prefix_config                               \
      $_with_program_prefix_config                       \
      $_with_program_suffix_config                       \
      $_with_program_transform_name_config               \
      $_with_multilib_config                             \
      $_with_threads_config                              \
      --enable-maintainer-mode                           \
      $_with_language_config                             \
      $_with_gnu_unique_object_config                    \
      $_with_lto_config                                  \
      $_with_error_on_warning_config                     \
      $_with_compiler_bootstrap_config                   || return 1

  fi
}

#### Compile

_phase_compile_if_necessary()
{
  if [ $_with_phase_compile_flag ]; then

    msg "Compiling ..."

    cd "$srcdir/build"

    msg2 "Compiling main payload..."

    make                                                 \
      $_with_boot_cflags_make_args                       \
      $_with_build_config_make_args                      \
      $_with_compiler_bootstrap_make_args                || return 1

   _phase_compile_docs_if_necessary                      || return 1

  fi
}

_phase_compile_docs_if_necessary()
{
  cd "$srcdir/build"                                     || return 1

  # info/man pages are created automatically by
  # `make' if the tools are available.

  if [ $_with_docs_pdf_target_compile ]; then
    msg2 "Compiling PDF docs..."
    make $_with_docs_pdf_target_compile                  || return 1
  fi

  # Currently there is no rule for installing DVI docs,
  # so this code can remain dormant (probably forever):
  #
  #if [ $_with_docs_dvi_target_compile ]; then
  #  msg2 "Compiling DVI docs..."
  #  make $_with_docs_dvi_target_compile                 || return 1
  #fi

  if [ $_with_docs_html_target_compile ]; then
    msg2 "Compiling HTML docs..."
    make $_with_docs_html_target_compile                 || return 1
  fi
}

#### Test

_phase_test_if_necessary()
{
  if [ $_with_phase_test_flag ]; then

    msg "Testing ..."

    cd "$srcdir/build"                                   || return 1
    make -k check || _phase_test_should_ignore_errors    || return 1

  fi
}

_phase_test_should_ignore_errors()
{
  warning "Testing wasn't (completely?) successful."  

  [ $_with_ignore_phase_test_failure_flag ] &&
    { msg2 "Ignoring..."; return 0; }

  local message="Ignore? [y/n] "
  local reply

  while true; do

    read -p "$message" reply

    case "$reply" in
      y) msg2 "Ignoring..." ; return 0 ;;
      n) msg2 "Failing..."  ; return 1 ;;
    esac

  done
} 

#### Install

_phase_install_if_necessary()
{
  if [ $_with_phase_install_flag ]; then

    msg "Installing ..."

    cd "$srcdir/build"                                   || return 1

    msg2 "Installing main payload..."
    make DESTDIR="$pkgdir" install                       || return 1

   _phase_install_docs_if_necessary                      || return 1
   _phase_install_paths_script_if_necessary              || return 1

  fi
}

_phase_install_docs_if_necessary()
{
  cd "$srcdir/build"                                     || return 1

  # info/man pages are installed automatically
  # if they were created.

  if [ $_with_docs_pdf_target_install ]; then
    msg2 "Installing PDF docs..."
    make DESTDIR="$pkgdir" $_with_docs_pdf_target_install  || return 1
  fi

  # Currently there is no rule for installing DVI docs,
  # so this code can remain dormant (probably forever):
  #
  #if [ $_with_docs_dvi_target_install ]; then
  #  msg2 "Installing DVI docs..."
  #  make DESTDIR="$pkgdir" $_with_docs_dvi_target_install  || return 1
  #fi

  if [ $_with_docs_html_target_install ]; then
    msg2 "Installing HTML docs..."
    make DESTDIR="$pkgdir" $_with_docs_html_target_install || return 1
  fi
}

_phase_install_paths_script_for_appending()
{
    echo "export PATH=\"\$PATH:$_with_prefix_path/bin\"" > "$1"
}

_phase_install_paths_script_for_prepending()
{
    echo "export PATH=\"$_with_prefix_path/bin:\$PATH\"" > "$1"
}

_phase_install_paths_script_if_necessary()
{
  [ "$_install_paths_script_func" ] || return 0

  script_dir="$pkgdir/etc/profile.d"
  script_path="$script_dir/gcc-svn.sh"

  install -d "$script_dir"                               || return 1

    $_install_paths_script_func "$script_path"           || return 1

  chmod 755 "$script_path"                               || return 1
}

#### Build

_pkgbuild_build()
{
  local PATH_OLD=$PATH
  export PATH="/opt/autoconf/2.64/bin:$PATH"

    _phase_source_if_necessary                             || return 1
    _phase_clean_if_necessary                              || return 1
    _phase_config_if_necessary                             || return 1
    _phase_compile_if_necessary                            || return 1
    _phase_test_if_necessary                               || return 1
    
  export PATH=$PATH_OLD
}

package()
{
  local PATH_OLD=$PATH
  export PATH="/opt/autoconf/2.64/bin:$PATH"

    _phase_install_if_necessary                            || return 1

  export PATH=$PATH_OLD
}

#######################
#### Miscellaneous ####
#######################
                                                         # http://gcc.gnu.org/install/specific.html#x86-x-linux
_package_binutils='binutils=2.21.1'                      # gnu docs say >=2.13.1

_package_gmp='gmp=5.0.2'                                 # gnu docs say >=4.2

_package_mpfr='mpfr=3.0.1.p4'                            # gnu docs say >=2.3.2

_package_libmpc='libmpc=0.9'                             # gnu docs say >=0.7.0; complex number optimizations

_package_glibc='glibc=2.14'                              # gnu docs vary; see local usage of this variable

_svntrunk=svn://gcc.gnu.org/svn/gcc/trunk
_svnmod=repo
